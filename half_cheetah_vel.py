import numpy as np
from gym.envs.mujoco import HalfCheetahEnv as HalfCheetahEnv_

class HalfCheetahEnv(HalfCheetahEnv_):
    def _get_obs(self):
        return np.concatenate([
            self.sim.data.qpos.flat[1:],
            self.sim.data.qvel.flat,
            self.get_body_com("torso").flat,
        ]).astype(np.float32).flatten()

    def viewer_setup(self):
        camera_id = self.model.camera_name2id('track')
        self.viewer.cam.type = 2
        self.viewer.cam.fixedcamid = camera_id
        self.viewer.cam.distance = self.model.stat.extent * 0.35
        # Hide the overlay
        self.viewer._hide_overlay = True

    def render(self, mode='human'):
        if mode == 'rgb_array':
            self._get_viewer().render()
            # window size used for old mujoco-py:
            width, height = 500, 500
            data = self._get_viewer().read_pixels(width, height, depth=False)
            return data
        elif mode == 'human':
            self._get_viewer().render()

class HalfCheetahVelEnv(HalfCheetahEnv):
    """Half-cheetah environment with target velocity, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a penalty equal to the
    difference between its current velocity and the target velocity. The tasks
    are generated by sampling the target velocities from the uniform
    distribution on [0, 2].

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """
    def __init__(self, goal_vel=1):
        self._goal_vel = goal_vel
        super(HalfCheetahVelEnv, self).__init__()

    def step(self, action):
        xposbefore = self.sim.data.qpos[0]
        self.do_simulation(action, self.frame_skip)
        xposafter = self.sim.data.qpos[0]

        forward_vel = (xposafter - xposbefore) / self.dt
        forward_reward = -1.0 * abs(forward_vel - self._goal_vel)
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        observation = self._get_obs()
        reward = forward_reward - ctrl_cost
        done = False
        infos = dict(reward_forward=forward_reward,
            reward_ctrl=-ctrl_cost)
        return (observation, reward, done, infos)





class CheetahMetaEnv:
    def __init__(self, env_fn, n_tasks):
        self.env_fn = env_fn
        self.env = env_fn()
        self.tasks = self.sample_tasks(n_tasks)
        self.reset_task(0)
      
        self._goal_vel = self.tasks[0].get('velocity', 0.0)
        self.sim = self.env.sim
        self.save_parameters()

    def __getattr__(self, attr):
        return getattr(self.env, attr)

    def reset_task(self, idx):
        self._task = self.tasks[idx]
        self._goal = idx # assume parameterization of task by single vector
        self.set_task(self._task)
        self.env.reset()


    def set_task(self, task):
        for param, param_val in task.items():
            self.env._goal_vel = param_val
            self._goal_vel = param_val

    def get_all_task_idx(self):
        return range(len(self.tasks))

    def sample_tasks(self, num_tasks):
        np.random.seed(1337)
        velocities = np.random.uniform(0.0, 3.0, size=(num_tasks,))
        tasks = [{'velocity': velocity} for velocity in velocities]
        return tasks    
 
    
    def save_parameters(self):
        self.init_params = {}
        self.init_params['velocity'] = self.env._goal_vel

if __name__ == "__main__":
    from functools import partial

    env_fn = partial(HalfCheetahVelEnv,goal_vel=1.0)
    aa = CheetahMetaEnv(env_fn, n_tasks = 10)
    tasks = aa.tasks

    
    while True:
        aa.env.reset()
        aa.set_task(np.random.choice(tasks))
        env = aa.env
        print(env._goal_vel)
        for _ in range(1):
            env.render()
            env.step(env.action_space.sample())  # take a random action